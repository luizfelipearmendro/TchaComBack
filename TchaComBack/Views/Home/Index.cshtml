@model HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}
@{
    var totalFuncionarios = Model.TotalDeFuncionarios;

    var totalSetores = Model.TotalDeSetores;

    var totalUsuarios = Model.TotalDeUsuarios;
}
<link rel="stylesheet" href="~/css/Home/home.css">
<script src="~/js/Home/home.js" defer></script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">


<section>
    @if (TempData["MensagemSucesso"] != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
            <div class="toast align-items-center text-bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        <strong>Sucesso!</strong> @TempData["MensagemSucesso"]
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    @if (TempData["MensagemErro"] != null)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
            <div class="toast align-items-center text-bg-danger border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        <strong>Atenção!</strong> @TempData["MensagemErro"]
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }
    <section class="container-home">
        <article class="box-one-home">
            <div class="card-box-one">
                <div class="flex-subox-one">
                    <div class="flex-icon">
                        <i class="bi bi-people-fill"></i>
                    </div>
                    <div class="flex-info-card-home">
                        <h1>@totalFuncionarios</h1>
                        <p>Funcionarios Ativos</p>
                    </div>
                </div>
                <div class="flex-subox-two">
                    <p class="title-flex-subox-two">Total acumulativo</p>
                    <div>

                    </div>
                    @{
                        var porcentagem = Model.PorcentagemAumentoFuncionarios;
                        string sinal = porcentagem switch
                        {
                            > 0 => "+",
                            < 0 => "-",
                            _ => ""
                        };

                        string classeCor = porcentagem switch
                        {
                            > 0 => "text-success",
                            < 0 => "text-danger",
                            _ => ""
                        };
                    }

                    @if (porcentagem != 0)
                    {
                        <div>
                            <span class="@classeCor" >@sinal</span>
                            <strong class="@classeCor">@Math.Abs(porcentagem).ToString("F2")%</strong>
                        </div>
                    }
                    else
                    {
                        <div style="color: black;" >0%</div>
                    }
                </div>
              
            </div>
            <div class="card-box-one">
                <div class="flex-subox-one">
                    <div class="flex-icon-secondary">
                        <i class="bi bi-building-fill"></i>
                    </div>
                    <div class="flex-info-card-home">
                        <h1>@totalSetores</h1>
                        <p>Setores Ativos</p>
                    </div>
                </div>
                <div class="flex-subox-two">
                    <p class="title-flex-secondary-subox-two">Total acumulativo</p>
                    @{
                        var porcentagem2 = Model.PorcentagemAumentoSetores;
                        string sinal2 = porcentagem2 switch
                        {
                            > 0 => "+",
                            < 0 => "-",
                            _ => ""
                        };

                        string classeCor2 = porcentagem2 switch
                        {
                            > 0 => "text-success",
                            < 0 => "text-danger",
                            _ => ""
                        };
                    }

                    @if (porcentagem2 != 0)
                    {
                        <div>
                            <span class="@classeCor2">@sinal2</span>
                            <strong class="@classeCor2">@Math.Abs(porcentagem2).ToString("F2")%</strong>
                        </div>
                    }
                    else
                    {
                        <div style="color: white" >0%</div>
                    }
                </div>
            </div>
            <div class="card-box-one">
                <div class="flex-subox-one">
                    <div class="flex-icon-secondary">
                        <i class="bi bi-person-fill-gear"></i>
                    </div>
                    <div class="flex-info-card-home">
                        <h1>@totalUsuarios</h1>
                        <p>Usuários Ativos</p>
                    </div>
                </div>
                <div class="flex-subox-two">
                    <p class="title-flex-secondary-subox-two">Total acumulativo</p>
                    @{
                        var porcentagem3 = Model.PorcentagemAumentoUsuarios;
                        string sinal3 = porcentagem3 switch
                        {
                            > 0 => "+",
                            < 0 => "-",
                            _ => ""
                        };

                        string classeCor3 = porcentagem3 switch
                        {
                            > 0 => "text-success",
                            < 0 => "text-danger",
                            _ => ""
                        };
                    }

                    @if (porcentagem3 != 0)
                    {
                        <div>
                            <span class="@classeCor3" >@sinal3</span>
                            <strong class="@classeCor3">@Math.Abs(porcentagem3).ToString("F2")%</strong>
                        </div>
                    }
                    else
                    {
                        <div style="color: white;">0%</div>
                    }
                </div>
            </div>
        </article>
        <article class="box-two-home">
            <article class="sub-box-home">
                <h2>Funcionários Ativos e Inativos por Setor</h2>
                <div class="modal-onda-header"></div>
                <div>
                    <canvas id="idGraficoFuncionariosPorSetores"></canvas>
                </div>
                <partial name="~/Views/Componentes/Botao-Primario/BotaoPrimario.cshtml"
                         view-data=@(new ViewDataDictionary(ViewData){
                         { "Texto", "Acessar" },
                         { "Url", "/Funcionarios/Funcionarios" },
                         { "ClasseExtra", "btn-dash" },
                         { "Id", "" },
                         { "Elemento", "a"}
                         }) />
            </article>
        </article>
        <article class="box-three-home" >
            <article class="sub-box-home">
                <h2>Usuários Ativos e Inativos por Perfil</h2>
                <div>
                    <canvas id="idGraficoUsuariosPorPerfil"></canvas>
                </div>
                <partial name="~/Views/Componentes/Botao-Primario/BotaoPrimario.cshtml"
                         view-data=@(new ViewDataDictionary(ViewData){
                         { "Texto", "Acessar" },
                         { "Url", "/UsuariosPerfilLogado" },
                         { "ClasseExtra", "btn-dash" },
                         { "Id", "" },
                         { "Elemento", "a"}
                         }) />
            </article>
            <article class="sub-box-home">
                <h2>Setores Ativos e Inativos por Categorias</h2>
                <div>
                    <canvas id="idGraficoSetoresPorCategorias"  ></canvas>
                </div>
                <partial name="~/Views/Componentes/Botao-Primario/BotaoPrimario.cshtml"
                         view-data=@(new ViewDataDictionary(ViewData){
                         { "Texto", "Acessar" },
                         { "Url", "/Setores" },
                         { "ClasseExtra", "btn-dash" },
                         { "Id", "" },
                         { "Elemento", "a"}
                         }) />
            </article>
        </article>
        <article class="box-foor-home">
            <article class="sub-box-home">
                <h2>Quantidade de Funcionarios por Sexo</h2>
                <div style="display:flex; justify-content:center; align-items:center;">
                    <canvas id="idGraficoFuncionariosPorSexo"></canvas>
                </div>
                <partial name="~/Views/Componentes/Botao-Primario/BotaoPrimario.cshtml"
                         view-data=@(new ViewDataDictionary(ViewData){
                         { "Texto", "Acessar" },
                         { "Url", "/Funcionarios/Funcionarios" },
                         { "ClasseExtra", "btn-dash" },
                         { "Id", "" },
                         { "Elemento", "a"}
                         }) />
            </article>
            <article class="sub-box-home">
                <h2>Ranking de Setores com Mais Funcionarios</h2>
                <div>
                   <canvas id="idGraficoRankingSetores" ></canvas>
                </div>
                <partial name="~/Views/Componentes/Botao-Primario/BotaoPrimario.cshtml"
                         view-data=@(new ViewDataDictionary(ViewData){
                         { "Texto", "Acessar" },
                         { "Url", "/Setores" },
                         { "ClasseExtra", "btn-dash" },
                         { "Id", "" },
                         { "Elemento", "a"}
                         }) />
            </article>
        </article>
       
    </section>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
<script src="~/js/Home/graficoSetoresPorCategorias.js" ></script>
<script src="~/js/Home/graficoFuncionariosPorSetores.js"></script>
<script src="~/js/Home/graficoUsuariosPerfil.js"></script>
<script src="~/js/Home/graficoQuantidadeFuncionariosPorSexo.js"></script>
<script src="~/js/Home/graficoSetoresComMaisFuncionarios.js"></script>

<script id="dadosGraficos" type="application/json">
    {
        "labelsCategorias": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.NomesCategorias)),
        "dataSetoresAtivos": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeSetorAtivos)),
        "dataSetoresInativos": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeSetorInativos)),

        "labelsSetores": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.NomesSetores)),
        "dataFuncionariosAtivos": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeFuncionariosAtivos)),
        "dataFuncionariosInativos": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeFuncionariosInativos)),

        "labelsPerfis": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.NomesPerfis)),
        "usuariosAtivosPorPerfil": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeUsuariosAtivosPorPerfil)),
        "usuariosInativosPorPerfil": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeUsuariosInativosPorPerfil)),

        "labelsSexoFuncionarios": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.LabelsSexoFuncionarios)),
        "quantidadeFuncionariosPorSexo": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeFuncionariosPorSexo)),

        "labelsRankingSetores": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.LabelsRankingSetores)),
        "quantidadeFuncionariosRankingSetores": @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.QuantidadeFuncionariosRankingSetores))

    }
</script>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const toastElList = [].slice.call(document.querySelectorAll('.toast'));
        toastElList.forEach(function (toastEl) {
            const bsToast = new bootstrap.Toast(toastEl, { delay: 5000 });
            bsToast.show();
        });
    });
</script>
